diff --git a/Makefile b/Makefile
index 5b54403..e10beb0 100644
--- a/Makefile
+++ b/Makefile
@@ -367,6 +367,21 @@ else ifeq ($(platform), retrofw)
    CXXFLAGS += -std=c++11
    CFLAGS += -std=gnu11
 
+# SF2000
+else ifeq ($(platform), sf2000)
+	TARGET := $(TARGET_NAME)_libretro_$(platform).a
+	MIPS=/opt/mips32-mti-elf/2019.09-03-2/bin/mips-mti-elf-
+	CC = $(MIPS)gcc
+	CXX = $(MIPS)g++
+	AR = $(MIPS)ar
+	CFLAGS = -EL -march=mips32 -mtune=mips32 -msoft-float -G0 -mno-abicalls -fno-pic
+	CFLAGS += -ffast-math -fomit-frame-pointer -ffunction-sections -fdata-sections
+	CFLAGS += -DSF2000 -DHAVE_STRL -DUSE_LIBRETRO_VFS
+	CXXFLAGS := $(CFLAGS) -std=gnu++11 -fno-use-cxa-atexit
+	CFLAGS += -std=gnu11
+	HAVE_CHD = 1
+	STATIC_LINKING = 1
+
 # MIYOO
 else ifeq ($(platform), miyoo)
    TARGET := $(TARGET_NAME)_libretro.so
diff --git a/deps/libchdr/include/dr_libs/dr_flac.h b/deps/libchdr/include/dr_libs/dr_flac.h
index 25aca69..95d0ce7 100644
--- a/deps/libchdr/include/dr_libs/dr_flac.h
+++ b/deps/libchdr/include/dr_libs/dr_flac.h
@@ -7194,7 +7194,9 @@ static drflac* drflac_open_with_metadata_private(drflac_read_proc onRead, drflac
     drflac_uint32 wholeSIMDVectorCountPerChannel;
     drflac_uint32 decodedSamplesAllocationSize;
 #ifndef DR_FLAC_NO_OGG
-    drflac_oggbs oggbs;
+	// Move a stack allocation to the heap for Ogg encapsulation
+	// https://github.com/mackron/dr_libs/commit/eaa0565f2d19be8f019a3b0a3158eed09f8cdfcb
+    drflac_oggbs* pOggbs = NULL;
 #endif
     drflac_uint64 firstFramePos;
     drflac_uint64 seektablePos;
@@ -7252,18 +7254,21 @@ static drflac* drflac_open_with_metadata_private(drflac_read_proc onRead, drflac
     /* There's additional data required for Ogg streams. */
     if (init.container == drflac_container_ogg) {
         allocationSize += sizeof(drflac_oggbs);
-    }
 
-    DRFLAC_ZERO_MEMORY(&oggbs, sizeof(oggbs));
-    if (init.container == drflac_container_ogg) {
-        oggbs.onRead = onRead;
-        oggbs.onSeek = onSeek;
-        oggbs.pUserData = pUserData;
-        oggbs.currentBytePos = init.oggFirstBytePos;
-        oggbs.firstBytePos = init.oggFirstBytePos;
-        oggbs.serialNumber = init.oggSerial;
-        oggbs.bosPageHeader = init.oggBosHeader;
-        oggbs.bytesRemainingInPage = 0;
+        pOggbs = (drflac_oggbs*)drflac__malloc_from_callbacks(sizeof(*pOggbs), &allocationCallbacks);
+        if (pOggbs == NULL) {
+            return NULL; //DRFLAC_OUT_OF_MEMORY;
+        }
+
+        DRFLAC_ZERO_MEMORY(pOggbs, sizeof(*pOggbs));
+        pOggbs->onRead = onRead;
+        pOggbs->onSeek = onSeek;
+        pOggbs->pUserData = pUserData;
+        pOggbs->currentBytePos = init.oggFirstBytePos;
+        pOggbs->firstBytePos = init.oggFirstBytePos;
+        pOggbs->serialNumber = init.oggSerial;
+        pOggbs->bosPageHeader = init.oggBosHeader;
+        pOggbs->bytesRemainingInPage = 0;
     }
 #endif
 
@@ -7284,11 +7289,14 @@ static drflac* drflac_open_with_metadata_private(drflac_read_proc onRead, drflac
         if (init.container == drflac_container_ogg) {
             onReadOverride = drflac__on_read_ogg;
             onSeekOverride = drflac__on_seek_ogg;
-            pUserDataOverride = (void*)&oggbs;
+            pUserDataOverride = (void*)pOggbs;
         }
 #endif
 
         if (!drflac__read_and_decode_metadata(onReadOverride, onSeekOverride, onMeta, pUserDataOverride, pUserDataMD, &firstFramePos, &seektablePos, &seektableSize, &allocationCallbacks)) {
+#ifndef DR_FLAC_NO_OGG
+            drflac__free_from_callbacks(pOggbs, &allocationCallbacks);
+#endif
             return NULL;
         }
 
@@ -7298,6 +7306,9 @@ static drflac* drflac_open_with_metadata_private(drflac_read_proc onRead, drflac
 
     pFlac = (drflac*)drflac__malloc_from_callbacks(allocationSize, &allocationCallbacks);
     if (pFlac == NULL) {
+#ifndef DR_FLAC_NO_OGG
+        drflac__free_from_callbacks(pOggbs, &allocationCallbacks);
+#endif
         return NULL;
     }
 
@@ -7308,7 +7319,12 @@ static drflac* drflac_open_with_metadata_private(drflac_read_proc onRead, drflac
 #ifndef DR_FLAC_NO_OGG
     if (init.container == drflac_container_ogg) {
         drflac_oggbs* pInternalOggbs = (drflac_oggbs*)((drflac_uint8*)pFlac->pDecodedSamples + decodedSamplesAllocationSize + seektableSize);
-        *pInternalOggbs = oggbs;
+
+        DRFLAC_COPY_MEMORY(pInternalOggbs, pOggbs, sizeof(*pOggbs));
+
+        /* At this point the pOggbs object has been handed over to pInternalOggbs and can be freed. */
+        drflac__free_from_callbacks(pOggbs, &allocationCallbacks);
+        pOggbs = NULL;
 
         /* The Ogg bistream needs to be layered on top of the original bitstream. */
         pFlac->bs.onRead = drflac__on_read_ogg;
diff --git a/libretro.cpp b/libretro.cpp
index 2286b84..96fc716 100644
--- a/libretro.cpp
+++ b/libretro.cpp
@@ -2117,7 +2117,7 @@ bool retro_load_game(const struct retro_game_info *info)
    for(y = 0; y < 2; y++)
    {
      Blip_Buffer_set_sample_rate(&sbuf[y],
-           44100, 50);
+           22050, 50);
      Blip_Buffer_set_clock_rate(&sbuf[y], (long)(PCE_MASTER_CLOCK / 3));
      Blip_Buffer_bass_freq(&sbuf[y], 10);
    }
@@ -2412,7 +2412,7 @@ void retro_get_system_av_info(struct retro_system_av_info *info)
 {
    memset(info, 0, sizeof(*info));
    info->timing.fps            = MEDNAFEN_CORE_TIMING_FPS;
-   info->timing.sample_rate    = 44100;
+   info->timing.sample_rate    = 22050;
    info->geometry.base_width   = MEDNAFEN_CORE_GEOMETRY_BASE_W;
    info->geometry.base_height  = MEDNAFEN_CORE_GEOMETRY_BASE_H;
    info->geometry.max_width    = MEDNAFEN_CORE_GEOMETRY_MAX_W;
@@ -2436,7 +2436,7 @@ void retro_deinit(void)
       log_cb(RETRO_LOG_INFO, "[%s]: Samples / Frame: %.5f\n",
             MEDNAFEN_CORE_NAME, (double)audio_frames / video_frames);
       log_cb(RETRO_LOG_INFO, "[%s]: Estimated FPS: %.5f\n",
-            MEDNAFEN_CORE_NAME, (double)video_frames * 44100 / audio_frames);
+            MEDNAFEN_CORE_NAME, (double)video_frames * 22050 / audio_frames);
    }
 
    libretro_supports_option_categories = false;
diff --git a/mednafen/cdrom/CDAccess_CCD.cpp b/mednafen/cdrom/CDAccess_CCD.cpp
index b26d06a..fa78134 100644
--- a/mednafen/cdrom/CDAccess_CCD.cpp
+++ b/mednafen/cdrom/CDAccess_CCD.cpp
@@ -291,6 +291,7 @@ bool CDAccess_CCD::Load(const std::string& path, bool image_memcache)
          return false;
       }
 
+// TODO: loading a whole .sub file into memory is a problem for our froggy
       sub_data = new uint8_t[(uint64)img_numsectors * 96];
       sub_stream.read(sub_data, (uint64)img_numsectors * 96);
    }
diff --git a/mednafen/cdrom/CDAccess_Image.cpp b/mednafen/cdrom/CDAccess_Image.cpp
index 031a1df..68664ad 100644
--- a/mednafen/cdrom/CDAccess_Image.cpp
+++ b/mednafen/cdrom/CDAccess_Image.cpp
@@ -354,7 +354,7 @@ bool CDAccess_Image::LoadSBI(const std::string& sbi_path)
 
 static bool StringToMSF(const char* str, unsigned* m, unsigned* s, unsigned* f)
 {
-   if(sscanf(str, "%u:%u:%u", m, s, f) != 3)
+   if(sscanf(str, "%d:%d:%d", m, s, f) != 3)
    {
       log_cb(RETRO_LOG_ERROR, "M:S:F time \"%s\" is malformed.\n", str);
       return false;

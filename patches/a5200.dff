diff --git a/Makefile b/Makefile
index 502a75b..10f199e 100644
--- a/Makefile
+++ b/Makefile
@@ -315,6 +315,17 @@ else ifeq ($(platform), retrofw)
 	FLAGS += -fomit-frame-pointer -ffast-math -march=mips32 -mtune=mips32
 	fpic := -fPIC
 
+# SF2000
+else ifeq ($(platform), sf2000)
+	TARGET := $(TARGET_NAME)_libretro_$(platform).a
+	MIPS:=/opt/mips32-mti-elf/2019.09-03-2/bin/mips-mti-elf-
+	CC = $(MIPS)gcc
+	AR = $(MIPS)ar
+	CFLAGS = -EL -march=mips32 -mtune=mips32 -msoft-float -G0 -mno-abicalls -fno-pic
+	CFLAGS += -ffast-math -fomit-frame-pointer -ffunction-sections -fdata-sections
+	CFLAGS += -DSF2000
+	STATIC_LINKING = 1
+
 # Miyoo
 else ifeq ($(platform), miyoo)
 	TARGET := $(TARGET_NAME)_libretro.so
diff --git a/emu/antic.c b/emu/antic.c
index cb66626..adf96e6 100644
--- a/emu/antic.c
+++ b/emu/antic.c
@@ -104,14 +104,22 @@ void video_putbyte(UBYTE *ptr, UBYTE val) {
 
 #define WRITE_VIDEO_LONG_UNALIGNED(ptr, val)  UNALIGNED_PUT_LONG((ptr), (val), atari_screen_write_long_stat)
 
-//ALEK 
-//#ifdef WORDS_UNALIGNED_OK
+#ifdef WORDS_UNALIGNED_OK
 #define IS_ZERO_ULONG(x) (! UNALIGNED_GET_LONG(x, pm_scanline_read_long_stat))
 #define DO_GTIA_BYTE(p, l, x) { \
 		WRITE_VIDEO_LONG_UNALIGNED((ULONG *) (p),     (l)[(x) >> 4]); \
 		WRITE_VIDEO_LONG_UNALIGNED((ULONG *) (p) + 1, (l)[(x) & 0xf]); \
 	}
-  
+#else /* WORDS_UNALIGNED_OK */
+#define IS_ZERO_ULONG(x) (!((const UBYTE *)(x))[0] && !((const UBYTE *)(x))[1] && !((const UBYTE *)(x))[2] && !((const UBYTE *)(x))[3])
+#define DO_GTIA_BYTE(p, l, x) { \
+		WRITE_VIDEO((UWORD *) (p),     (UWORD) ((l)[(x) >> 4])); \
+		WRITE_VIDEO((UWORD *) (p) + 1, (UWORD) ((l)[(x) >> 4])); \
+		WRITE_VIDEO((UWORD *) (p) + 2, (UWORD) ((l)[(x) & 0xf])); \
+		WRITE_VIDEO((UWORD *) (p) + 3, (UWORD) ((l)[(x) & 0xf])); \
+	}
+#endif /* WORDS_UNALIGNED_OK */
+
     
 /* ANTIC Registers --------------------------------------------------------- */
 
@@ -478,7 +486,7 @@ UWORD cl_lookup[128];
    the platform doesn't allow unaligned long access.
    Artifacting also uses unaligned long access if it's supported. */
 
-//ALEK
+#ifdef WORDS_UNALIGNED_OK
 
 #define INIT_BACKGROUND_6 ULONG background = cl_lookup[C_PF2] | (((ULONG) cl_lookup[C_PF2]) << 16);
 #define INIT_BACKGROUND_8 ULONG background = lookup_gtia9[0];
@@ -493,6 +501,27 @@ UWORD cl_lookup[128];
 		ptr += 4; \
 	}
 
+#else
+
+#define INIT_BACKGROUND_6
+#define INIT_BACKGROUND_8
+#define DRAW_BACKGROUND(colreg) {\
+		WRITE_VIDEO(ptr,     cl_lookup[colreg]); \
+		WRITE_VIDEO(ptr + 1, cl_lookup[colreg]); \
+		WRITE_VIDEO(ptr + 2, cl_lookup[colreg]); \
+		WRITE_VIDEO(ptr + 3, cl_lookup[colreg]); \
+		ptr += 4;\
+	}
+#define DRAW_ARTIF {\
+		WRITE_VIDEO(ptr++, ((UWORD *) art_curtable)[(screendata_tally & 0x03fc00) >> 9]); \
+		WRITE_VIDEO(ptr++, ((UWORD *) art_curtable)[((screendata_tally & 0x03fc00) >> 9) + 1]); \
+		WRITE_VIDEO(ptr++, ((UWORD *) art_curtable)[(screendata_tally & 0x003fc0) >> 5]); \
+		WRITE_VIDEO(ptr++, ((UWORD *) art_curtable)[((screendata_tally & 0x003fc0) >> 5) + 1]); \
+	}
+
+#endif /* WORDS_UNALIGNED_OK */
+
+
 /* Hi-res modes optimizations
    Now hi-res modes are drawn with words, not bytes. Endianess defaults
    to little-endian. MSB_FIRST should be defined when compiling on
@@ -1266,9 +1295,11 @@ static void draw_antic_2_gtia9(int nchars, const UBYTE *ANTIC_memptr, UWORD *ptr
 
 static void draw_antic_2_gtia10(int nchars, const UBYTE *ANTIC_memptr, UWORD *ptr, const ULONG *t_pm_scanline_ptr)
 {
-//ALEK 
-//#ifdef WORDS_UNALIGNED_OK
+#ifdef WORDS_UNALIGNED_OK
 	ULONG lookup_gtia10[16];
+#else
+	UWORD lookup_gtia10[16];
+#endif
 	INIT_ANTIC_2
 	if ((uintptr_t) ptr & 2) { /* HSCROL & 1 */
 		prepare_an_antic_2(nchars, ANTIC_memptr, t_pm_scanline_ptr);
@@ -1276,8 +1307,7 @@ static void draw_antic_2_gtia10(int nchars, const UBYTE *ANTIC_memptr, UWORD *pt
 		return;
 	}
 
-//ALEK 
-//#ifdef WORDS_UNALIGNED_OK
+#ifdef WORDS_UNALIGNED_OK
 	lookup_gtia10[0] = cl_lookup[C_PM0] | (cl_lookup[C_PM0] << 16);
 	lookup_gtia10[1] = cl_lookup[C_PM1] | (cl_lookup[C_PM1] << 16);
 	lookup_gtia10[2] = cl_lookup[C_PM2] | (cl_lookup[C_PM2] << 16);
@@ -1287,7 +1317,17 @@ static void draw_antic_2_gtia10(int nchars, const UBYTE *ANTIC_memptr, UWORD *pt
 	lookup_gtia10[14] = lookup_gtia10[6] = cl_lookup[C_PF2] | (cl_lookup[C_PF2] << 16);
 	lookup_gtia10[15] = lookup_gtia10[7] = cl_lookup[C_PF3] | (cl_lookup[C_PF3] << 16);
 	lookup_gtia10[8] = lookup_gtia10[9] = lookup_gtia10[10] = lookup_gtia10[11] = lookup_gtia9[0];
-//ALEK 
+#else
+	lookup_gtia10[0] = cl_lookup[C_PM0];
+	lookup_gtia10[1] = cl_lookup[C_PM1];
+	lookup_gtia10[2] = cl_lookup[C_PM2];
+	lookup_gtia10[3] = cl_lookup[C_PM3];
+	lookup_gtia10[12] = lookup_gtia10[4] = cl_lookup[C_PF0];
+	lookup_gtia10[13] = lookup_gtia10[5] = cl_lookup[C_PF1];
+	lookup_gtia10[14] = lookup_gtia10[6] = cl_lookup[C_PF2];
+	lookup_gtia10[15] = lookup_gtia10[7] = cl_lookup[C_PF3];
+	lookup_gtia10[8] = lookup_gtia10[9] = lookup_gtia10[10] = lookup_gtia10[11] = cl_lookup[C_BAK];
+#endif
 	ptr++;
 	t_pm_scanline_ptr = (const ULONG *) (((const UBYTE *) t_pm_scanline_ptr) + 1);
 	CHAR_LOOP_BEGIN
@@ -1922,12 +1962,18 @@ static void draw_antic_f_gtia9(int nchars, const UBYTE *ANTIC_memptr, UWORD *ptr
 
 static void draw_antic_f_gtia10(int nchars, const UBYTE *ANTIC_memptr, UWORD *ptr, const ULONG *t_pm_scanline_ptr)
 {
+#ifdef WORDS_UNALIGNED_OK
 	ULONG lookup_gtia10[16];
+#else
+	UWORD lookup_gtia10[16];
+#endif
 	if ((uintptr_t) ptr & 2) { /* HSCROL & 1 */
 		prepare_an_antic_f(nchars, ANTIC_memptr, t_pm_scanline_ptr);
 		draw_an_gtia10(t_pm_scanline_ptr);
 		return;
 	}
+
+#ifdef WORDS_UNALIGNED_OK
 	lookup_gtia10[0] = cl_lookup[C_PM0] | (cl_lookup[C_PM0] << 16);
 	lookup_gtia10[1] = cl_lookup[C_PM1] | (cl_lookup[C_PM1] << 16);
 	lookup_gtia10[2] = cl_lookup[C_PM2] | (cl_lookup[C_PM2] << 16);
@@ -1937,7 +1983,17 @@ static void draw_antic_f_gtia10(int nchars, const UBYTE *ANTIC_memptr, UWORD *pt
 	lookup_gtia10[14] = lookup_gtia10[6] = cl_lookup[C_PF2] | (cl_lookup[C_PF2] << 16);
 	lookup_gtia10[15] = lookup_gtia10[7] = cl_lookup[C_PF3] | (cl_lookup[C_PF3] << 16);
 	lookup_gtia10[8] = lookup_gtia10[9] = lookup_gtia10[10] = lookup_gtia10[11] = lookup_gtia9[0];
-//ALEK 
+#else
+	lookup_gtia10[0] = cl_lookup[C_PM0];
+	lookup_gtia10[1] = cl_lookup[C_PM1];
+	lookup_gtia10[2] = cl_lookup[C_PM2];
+	lookup_gtia10[3] = cl_lookup[C_PM3];
+	lookup_gtia10[12] = lookup_gtia10[4] = cl_lookup[C_PF0];
+	lookup_gtia10[13] = lookup_gtia10[5] = cl_lookup[C_PF1];
+	lookup_gtia10[14] = lookup_gtia10[6] = cl_lookup[C_PF2];
+	lookup_gtia10[15] = lookup_gtia10[7] = cl_lookup[C_PF3];
+	lookup_gtia10[8] = lookup_gtia10[9] = lookup_gtia10[10] = lookup_gtia10[11] = cl_lookup[C_BAK];
+#endif
 	ptr++;
 	t_pm_scanline_ptr = (const ULONG *) (((const UBYTE *) t_pm_scanline_ptr) + 1);
 	CHAR_LOOP_BEGIN
